(1) What is React Router? How does it handle routing in single-page applications?

=> React Router is a popular library for managing routing in React applications, particularly single-page applications (SPAs). It allows developers to define and manage routes in their applications, enabling navigation between different views or components without requiring a full page reload.

=> In a typical SPA, the entire application is loaded into the browser once, and different views are rendered based on user interaction. Instead of loading new HTML pages, React Router updates the displayed content dynamically.When a user navigates to a different route (e.g., by clicking a link), React Router intercepts the navigation event and updates the URL using the History API. It does this without causing a full page reload.

(2) Explain the difference between BrowserRouter, Route, Link, and Switch
components in React Router.

=> 1. BrowserRouter
Purpose: BrowserRouter is a high-level component that uses the HTML5 history API to keep your UI in sync with the URL. It enables client-side routing by allowing you to manage the browser's history stack and manipulate the URL without reloading the page.
Usage: You typically wrap your entire application (or the part of it that requires routing) in a BrowserRouter. This component provides the routing context to all of its child components.

=> 2. Route
Purpose: The Route component is used to define a mapping between a URL path and a React component. When the URL matches the path specified in the Route, the corresponding component is rendered.
Props: The Route component accepts several props, including:
path: The URL path to match (e.g., /about).
component: The component to render when the path matches.
exact: If set to true, it ensures that the route only matches if the path is an exact match.
render: An alternative way to render a component, allowing for inline rendering or passing props.

=> 3. Link
Purpose: The Link component is used to create navigational links in your application. It allows users to navigate to different routes without causing a full page reload, maintaining the SPA experience.
Props: The most common prop is to, which specifies the destination URL. You can also use replace to replace the current entry in the history stack instead of adding a new one.

=> 4. Switch
Purpose: The Switch component is used to group multiple Route components and render only the first one that matches the current URL. This is useful for avoiding rendering multiple routes at once and ensuring that only one route is displayed.
Behavior: When used, Switch will iterate through its child Route components and render the first one that matches the current path. If no routes match, you can provide a Route for a "Not Found" page.